1, Reading Assignment: When should accessor methods be used?
- Khi cần bảo vệ dữ liệu (Encapsulation)
	+ Accessor giúp kiểm soát cách dữ liệu của đối tượng được truy cập.
	+ Nếu cho phép truy cập trực tiếp (public), dữ liệu có thể bị thay đổi ngoài ý muốn.
- Khi muốn áp dụng kiểm tra trước khi trả giá trị
	+ Có thể thực hiện kiểm tra trước khi trả về dữ liệu.
- Khi cần đảm bảo tính bất biến (Immutability)
	+ Các lớp bất biến (immutable classes) không cho phép thay đổi giá trị sau khi tạo.
	+ Chỉ cung cấp getter mà không có setter.
- Khi cần theo dõi hoặc ghi log truy cập
	+ Có thể ghi log hoặc thực hiện hành động khi thuộc tính được truy cập.

2, If you create a constructor method to build a DVD by title then create a constructor method to build
a DVD by category. Does JAVA allow you to do this?
- Nếu tạo một constructor để xây dựng DVD chỉ với title và sau đó tạo một constructor để xây dựng DVD chỉ với category, Java sẽ không cho phép điều này. Lý do là cả hai constructor sẽ có cùng chữ ký (cả hai chỉ nhận một tham số kiểu String), điều này gây ra xung đột. Đây được gọi là lỗi duplicate constructor trong Java.
- Java phân biệt giữa các constructor nạp chồng dựa trên số lượng hoặc kiểu của tham số. Trong trường hợp này:
    +	DigitalVideoDisc(String title)
    +  	DigitalVideoDisc(String category)
Cả hai constructor đều nhận một tham số kiểu String, và Java không thể phân biệt chúng chỉ dựa trên tên của tham số, do đó sẽ gây ra lỗi biên dịch.

3,  Is JAVA a Pass by Value or a Pass by Reference programming language?
Java luôn luôn là pass by value (truyền tham trị), không phải pass by reference (truyền tham chiếu).

4, After the call of swap(jungleDVD, cinderellaDVD) why does the title of these two
objects still remain?
Trong Java, đối tượng không được truyền trực tiếp mà thay vào đó, bản sao của tham chiếu đến đối tượng được truyền vào phương thức.
Cụ thể, trong phương thức swap():
```
public static void swap(DigitalVideoDisc dvd1, DigitalVideoDisc dvd2) {
    DigitalVideoDisc temp = dvd1;
    dvd1 = dvd2;
    dvd2 = temp;
}
````
dvd1 và dvd2 là bản sao của tham chiếu gốc trong main(), không phải bản thân tham chiếu gốc.
Khi đổi chỗ dvd1 và dvd2 trong swap(), ta chỉ thay đổi các bản sao của tham chiếu trong phương thức này.
Sau khi phương thức kết thúc, các thay đổi chỉ có hiệu lực trong swap() và không ảnh hưởng đến các biến gốc trong main().
Vì vậy, tiêu đề của hai đối tượng vẫn giữ nguyên sau khi gọi swap().

5, After the call of changeTitle(jungleDVD, cinderellaDVD.getTitle()) why is
the title of the JungleDVD changed?
Khi gọi changeTitle(jungleDVD, cinderellaDVD.getTitle()), quá trình diễn ra như sau:
- dvd là một bản sao của tham chiếu jungleDVD, có nghĩa là cả hai đều trỏ đến cùng một đối tượng trong bộ nhớ.
- dvd.setTitle(title); → Điều này thay đổi tiêu đề của đối tượng mà cả dvd và jungleDVD đang trỏ đến.
- Kết quả: Tiêu đề của jungleDVD trong main() cũng thay đổi.
- dvd = new DigitalVideoDisc(oldTitle);
- Ở đây, dvd bây giờ trỏ đến một đối tượng mới với tiêu đề ban đầu, nhưng chỉ trong phương thức changeTitle().
- Vì dvd chỉ là bản sao của tham chiếu, jungleDVD trong main() vẫn không bị thay đổi tham chiếu.
- Khi gọi dvd.setTitle(title);, ta đang thay đổi dữ liệu bên trong đối tượng mà jungleDVD tham chiếu đến.
- Việc gán dvd = new DigitalVideoDisc(oldTitle); chỉ ảnh hưởng đến dvd trong changeTitle(), không ảnh hưởng đến jungleDVD trong main().
